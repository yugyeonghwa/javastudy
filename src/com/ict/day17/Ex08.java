package com.ict.day17;

public class Ex08 {
/*
 함수형 프로그래밍과 람다식
 - 메서드와 함수의 차이 : 클래스 안에 존재하는 함수를 메서드, 별도로 만들 수 있는 함수를 함수 또는 Function 
				   기능적으로는 똑같음 (자바에서는 함수가 없음. 무조건 메서드)
 - 함수형 프로그래밍 : 함수의 구현과 호출만 만들 수 있는 프로그래밍 방식을 말함
 - 람다식 : 함수형 프로그래밍에서 사용하는 방식으로
         - 코드가 매우 간결해짐
  		 - 컬렉션 요소(대용량 데이터)를 필터링 또는 매핑을 쉽게 집계 (String = 스트림)
  	자바에서는 람다식을 함수형 인터페이스의 익명 구현 객체 취급함
  	** 함수형 인터페이스란 추상메서드가 하나인 인터페이스를 말함
  	** 추상메서드가 하나 이상이면 어떤 메서드를 구현하는 것인지 모호해짐
  	   이를 방지하기 위해서 @FunctionalInterface 애노테이션을 사용해서
  	   오류를 발생하게 함
  	람다식 -> 매개변수를 가진 코드불록 -> 익명 구현 객체
  	람다식 형식) :  ([매개변수]) -> { 실행문 };
  	
  		일반 메서드				    	-->		람다식 : 1) 반한형과 이름 삭제, 2) ([매개변수]) -> {}
  	int add(int x, int y) {						  (int x, int y) -> {
  	  return x + u;
  	} 											   }
   
   1. 매개변수 자료형과 괄호 생략하기
   	  - 매개변수의 자료형은 생략할 수 있음
   	    (x, y) -> {return x + y;}
   	  
   	  - 만약에 매개변수가 하나이면 () 생략할 수 있음
   	     x -> {return x + 10;}
   	     
   2. 중괄호 생략하기
      - 중괄호의 구현 부분이 문장인 경우 중괄호 생략할 수 있음
        (return 문은 중괄호 생략불가)
        (x, y) -> {return x + y;}
         x -> {return x + 10;}
         
        (x, y) -> x + y;
         x -> x + 10;
         
   3. return 생략하기
      구현 부분에 return 문 하나라면 중괄호와 return 문 모두 생략하고 식만 씀
        (x, y) -> x + y;
         x -> x + 10;
         
         
         
 */
}
